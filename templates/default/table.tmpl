package {{ .PackageName }}


import (
  "context"
  "fmt"
  "time"

  "gopkg.in/volatiletech/null.v6"
)

// Suppress not used errors.
var (
  _ = context.Background
  _ = fmt.Printf
  _ = time.Now
  _ = null.NewBool
)

{{ $tableName := .Table.TableName }}
{{ $name := UpperCamel .Table.TableName }}

// {{ $name }} represents a row of table `{{ $tableName }}`.
type {{ $name }} struct {
  {{ range $col := .Table.Columns -}}
  {{ UpperCamel $col.ColumnName }} {{ ScanType $col }} `json:"{{ $col.ColumnName }}" db:"{{ $col.ColumnName }}"`
  {{ end -}}
}

{{ if .Table.Primary.Valid -}}
// nx{{ $name }}PrimaryValue is the primary value of {{ $name }}.
type nx{{ $name }}PrimaryValue struct {
  {{ range $col := .Table.Primary.Columns -}}
  {{ UpperCamel $col.ColumnName }} {{ ScanType $col }}
  {{ end -}}
}
{{ end }}

// nxNull{{ $name }} is nullable version of {{ $name }}. It's mainly used for scanning row which maybe NULL (e.g. in outer join).
type nxNull{{ $name }} struct {
  ordinary {{ $name }}
  ordinaryPtr *{{ $name }}
  {{ range $col := .Table.Columns -}}{{ if not $col.Nullable -}}
  null{{ UpperCamel $col.ColumnName }} {{ NullScanType $col }}
  {{ end -}}{{ end -}}
}

// nx{{ $name }}Slice is slice of {{ $name }}.
type nx{{ $name }}Slice []*{{ $name }}

var (
  nx{{ $name }}Meta = NewTableMeta(
    "{{ $tableName }}",
    []string{ {{- range $col := .Table.Columns }}"{{ $col.ColumnName }}", {{ end -}} },
    OptColumnsWithDefault({{ range $col := .Table.Columns }}{{ if $col.HasDefaultValue }}"{{ $col.ColumnName }}", {{ end }}{{ end }}),
    {{ if .Table.Primary.Valid -}}
    OptPrimaryColumns({{ range $col := .Table.Primary.Columns }}"{{ $col.ColumnName }}", {{ end }}),
    {{ end -}}
    {{ if .Table.AutoIncColumn.Valid -}}
    OptAutoIncColumn("{{ .Table.AutoIncColumn.ColumnName }}"),
    {{ end -}}
  )
)

// PreScan appends all columns to dest for scanning. Implements ColumnScanner interface.
func (tr *{{ $name }}) PreScan(dest *[]interface{}) {
  *dest = append(*dest,
  {{ range $col := .Table.Columns -}}
    tr.{{ UpperCamel $col.ColumnName }},
  {{ end -}}
  )
}

// PostScan do nothing. Implements ColumnScanner interface.
func (tr *{{ $name }}) PostScan() error { 
  return nil 
}

// TableMeta returns the table meta information of table `{{ $tableName }}`. Implements TableRow interface.
func (tr *{{ $name }}) TableMeta() *TableMeta {
  return nx{{ $name }}Meta
}

// Valid returns true if this is a valid table row (e.g. not NULL). Implements TableRow interface.
func (tr *{{ $name }}) Valid() bool {
  return tr != nil
}

// ColumnValue returns the i-th column value of table `{{ $tableName }}`. Implements TableRow interface.
func (tr *{{ $name }}) ColumnValue(i int) interface{} {
  switch i {
  {{ range $i, $col := .Table.Columns -}}
  case {{ $i }}:
    return tr.{{ UpperCamel $col.ColumnName }}
  {{ end -}}
  default:
    panic(fmt.Errorf("{{ $name }}.ColumnValue: %d out of range", i))
  }
}

// ColumnPointe returns the i-th column's pointer of table `{{ $tableName }}`. Implements TableRow interface.
func (tr *{{ $name }}) ColumnPointer(i int) interface{} {
  switch i {
  {{ range $i, $col := .Table.Columns -}}
  case {{ $i }}:
    return &tr.{{ UpperCamel $col.ColumnName }}
  {{ end -}}
  default:
    panic(fmt.Errorf("{{ $name }}.ColumnPointer: %d out of range", i))
  }
}

{{ if .Table.Primary.Valid -}}
// PrimaryValue returns the primary key value of this row. Implements TableRowWithPrimary interface.
func (tr *{{ $name }}) PrimaryValue() interface{} {
  if tr == nil {
    return nil
  }
  return nx{{ $name }}PrimaryValue{
    {{ range $col := .Table.Primary.Columns -}}
    {{ UpperCamel $col.ColumnName }}: tr.{{ UpperCamel $col.ColumnName }},
    {{ end -}}
  }
}
{{ end -}}

// Insert is used to insert this row into table.
// NOTE: This method does not modify content in `tr` except auto increment column (if exists).
{{ if .Table.Primary.Valid -}}
// Use Reload to get the newest data from database.
{{ end -}}
func (tr *{{ $name }}) Insert(ctx context.Context, e Execer) error {
  return insertTR(ctx, e, tr)
}

{{ if .Table.Primary.Valid -}}
// Reload is used to reload this row from table.
func (tr *{{ $name }}) Reload(ctx context.Context, q Queryer) error {
  return selectTR(ctx, q, tr, false)
}
{{ end }}

{{ if .Table.Primary.Valid -}}
// ReloadWithLock is used to reload this row with lock from table.
func (tr *{{ $name }}) ReloadWithLock(ctx context.Context, q Queryer) error {
  return selectTR(ctx, q, tr, true)
}
{{ end }}

{{ if .Table.Primary.Valid -}}
// Update is used to update this row in table. Only columns with different values will be updated.
// NOTE: This method does not modify content in `tr`/`newTr`. 
// Use Reload to get the newest data from database.
func (tr *{{ $name }}) Update(ctx context.Context, e Execer, newTr *{{ $name }}) error {
  return updateTR(ctx, e, tr, newTr)
}
{{ end }}

{{ if .Table.Primary.Valid -}}
// Delete is used to delete this row from table.
func (tr *{{ $name }}) Delete(ctx context.Context, e Execer) error {
  return deleteTR(ctx, e, tr)
}
{{ end }}

// Copy this row.
func (tr *{{ $name }}) Copy() *{{ $name }} {
  ret := &{{ $name }}{}
  *ret = *tr
  return ret
}

{{ range $index := .Table.Indices -}}
{{ if $index.IsUnique -}}
// {{ $name }}By{{ UpperCamel $index.IndexName }} is used to select `{{ $tableName }}` row by key `{{ $index.IndexName }}`.
func {{ $name }}By{{ UpperCamel $index.IndexName }}(ctx context.Context, q Queryer{{ range $col := $index.Columns }}, {{ LowerCamel $col.ColumnName }} {{ NotNullScanType $col }}{{ end }}, lock bool) (*{{ $name }}, error){
  tr := {{ $name }}{}
  if err := selectTRCond(ctx, q, &tr, lock, "1{{ range $col := $index.Columns }} AND `{{ $col.ColumnName }}`=?{{ end }}",
    {{- range $col := $index.Columns -}}
    {{ LowerCamel $col.ColumnName }},
    {{- end -}}
  ); err != nil {
    return nil, err
  }
  return &tr, nil
}
{{ end -}}
{{ end }}

// PreScan appends all columns to dest for scanning. Implements ColumnScanner interface.
func (tr *nxNull{{ $name }}) PreScan(dest *[]interface{}) {
  *dest = append(*dest,
  {{ range $i, $col := .Table.Columns -}}
  {{ if $col.Nullable -}}
    &tr.ordinary.{{ UpperCamel $col.ColumnName }},
  {{ else -}}
    &tr.null{{ UpperCamel $col.ColumnName }},
  {{ end -}}
  {{ end -}}
  )
}

// PostScan must be called after scanning to do some extra processsing. Implements ColumnScanner interface.
func (tr *nxNull{{ $name }}) PostScan() error {

  var nullCol string

  {{ range $col := .Table.Columns -}}
  {{ if not $col.Nullable -}}
  if !tr.null{{ UpperCamel $col.ColumnName }}.Valid {
    nullCol = "{{ $col.ColumnName }}"
    goto CheckNULL
  }
  tr.ordinary.{{ UpperCamel $col.ColumnName }} = tr.null{{ UpperCamel $col.ColumnName }}.{{ Slice (NullScanType $col) 5 }}

  {{ end -}}
  {{ end -}}

  if false {
    // NOTE: Impossible branch to suppress "label CheckNULL defined and not used" error.
    goto CheckNULL
  }

  // All checks passed
  tr.ordinaryPtr = &tr.ordinary
  return nil

CheckNULL:
  if *tr == (nxNull{{ $name }}{}) {
    // Null row, set ptr to nil.
    tr.ordinaryPtr = nil
    return nil
  }
  return fmt.Errorf("{{ $tableName }}.%s can't be NULL", nullCol)
}


// Ordinary returns the ordinary {{ $name }}. It must be called only after PostScan.
func (tr *nxNull{{ $name }}) Ordinary() *{{ $name }} {
  return tr.ordinaryPtr
}

func (slice *nx{{ $name }}Slice) Len() int {
  return len(*slice)
}

func (slice *nx{{ $name }}Slice) Item(i int) interface{} {
  return (*slice)[i]
}

func (slice *nx{{ $name }}Slice) Append(item interface{}) {
  obj := (*{{ $name }})(nil)
  if item != nil {
    obj = item.(*{{ $name }})
  }
  *slice = append(*slice, obj)
}

