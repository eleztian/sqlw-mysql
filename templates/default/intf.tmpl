package {{ .PackageName }}

import (
  "context"
  "database/sql"
)

// Execer is the common interface to execute a query without returning any row.
type Execer interface {
  ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error)
}

// Queryer is the common interface to execute a query returning row(s).
type Queryer interface {
  QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)
  QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row
}

// ColumnScanner represents a collection of columns that can be scanned into from a row.
type ColumnScanner interface {
  // nxPreScan appends all columns to dest for scanning.
  nxPreScan(dest *[]interface{})

  // nxPostScan must be called after scanning to do some extra processsing.
  nxPostScan() error
}

// TableRow represents a table's row.
type TableRow interface {
  ColumnScanner

  // TableMeta returns the table's meta information.
  TableMeta() *TableMeta

  // Valid returns true if this is a valid table row (e.g. not NULL).
  Valid() bool

  // ColumnValue returns the i-th column value.
  ColumnValue(i int) interface{}

  // ColumnPointer returns the i-th column's pointer.
  ColumnPointer(i int) interface{}

}

// TableRowWithPrimary represents row of table with primary key.
type TableRowWithPrimary interface {
  TableRow

  // PrimaryValue returns the primary key value of this row.
  // The returned value is comparable by values.
  PrimaryValue() interface{}
}

// Slicer represents an appendable slice.
type Slicer interface {
  // nxLen returns the length of the slice.
  nxLen() int

  // nxItem returns the i-th item of the slice. i should be within [0, nxLen()), otherwise a panic will be raised.
  nxItem(i int) interface{}

  // nxAppend an item to the slice. If item is nil, then an empty item should be appended.
  nxAppend(item interface{})
}

// Slicers represents a slice of Slicer.
type Slicers interface {
  // nxLen returns the number of Slicer.
  nxLen() int

  // nxSlicer returns the i-th Slicer.
  nxSlicer(i int) Slicer

  // nxAppend appends an empty Slicer.
  nxAppend()
}
